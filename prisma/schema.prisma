// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and basic user information
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  business      Business?
  influencer    Influencer?
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model for managing user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Business profile for business users
model Business {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  website     String?
  industry    String?
  description String?  @db.Text
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]
}

// Influencer profile for influencer users
model Influencer {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?  @db.Text
  niche        String[] // Array of niches/categories
  followers    Int      @default(0)
  engagement   Float    @default(0) // Engagement rate (0-1)
  authenticity Float    @default(0) // Authenticity score (0-1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts SocialAccount[]
  portfolioItems PortfolioItem[]
  campaignMatches CampaignMatch[]
}

// Social media accounts for influencers
model SocialAccount {
  id           String   @id @default(cuid())
  influencerId String
  platform     String   // Instagram, TikTok, YouTube, etc.
  username     String
  url          String
  followers    Int      @default(0)
  engagement   Float    @default(0) // Engagement rate (0-1)
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

// Portfolio items for influencers
model PortfolioItem {
  id           String      @id @default(cuid())
  influencerId String
  title        String
  description  String?     @db.Text
  mediaUrl     String
  mediaType    MediaType
  platform     String
  engagement   Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

// Campaign model for business campaigns
model Campaign {
  id             String   @id @default(cuid())
  businessId     String
  title          String
  description    String   @db.Text
  goals          String[] // Array of campaign goals
  targetAudience Json     // JSON object with target audience details
  budget         Float
  startDate      DateTime
  endDate        DateTime
  status         CampaignStatus @default(DRAFT)
  requirements   String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  campaignMatches CampaignMatch[]
}

// Campaign matches between campaigns and influencers
model CampaignMatch {
  id           String        @id @default(cuid())
  campaignId   String
  influencerId String
  status       MatchStatus   @default(PENDING)
  score        Float         // Match score from AI algorithm (0-1)
  offer        Float?        // Offered payment amount
  brief        String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer Influencer  @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  messages   Message[]
}

// Messages between businesses and influencers
model Message {
  id              String   @id @default(cuid())
  campaignMatchId String
  senderId        String   // User ID of the sender
  content         String   @db.Text
  read            Boolean  @default(false)
  createdAt       DateTime @default(now())

  // Relations
  campaignMatch CampaignMatch @relation(fields: [campaignMatchId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  BUSINESS
  INFLUENCER
  ADMIN
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

